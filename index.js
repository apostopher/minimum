// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var GameCtrl, Minimum, MongoClient, bodyParser, compression, config, express, http, path, redisAdapter, server_instance, socketio, _;

  http = require('http');

  path = require('path');

  _ = require('lodash');

  express = require('express');

  socketio = require('socket.io');

  compression = require('compression');

  redisAdapter = require('socket.io-redis');

  bodyParser = require('body-parser');

  config = require('./config/config');

  GameCtrl = require('./gameCtrl');

  MongoClient = require('mongodb').MongoClient;

  Minimum = (function() {
    function Minimum() {
      this.app = express();
      this.server = http.createServer(this.app);
      this.io = socketio(this.server);
      this.io.adapter(redisAdapter({
        host: 'localhost',
        port: 6379
      }));
      this.app.use(express["static"](path.resolve(__dirname, 'www', 'dist')));
      this.app.use(compression({
        threshold: 512
      }));
      this.app.use(bodyParser.json());
      this.app.use(bodyParser.urlencoded({
        extended: true
      }));
    }

    Minimum.prototype.init = function(callback) {
      var _this = this;
      return MongoClient.connect("mongodb://localhost:27017/Minimum", function(error, db) {
        if (error) {
          return callback(error);
        }
        _this.db = db;
        _this.collection = db.collection('games');
        _this.configure();
        return callback(null);
      });
    };

    Minimum.prototype.configure = function() {
      var gameCtrl;
      gameCtrl = new GameCtrl(this.io);
      return this.io.on('connection', _.bind(gameCtrl.setupRoutes, gameCtrl));
    };

    Minimum.prototype.start = function(callback) {
      var port;
      port = +process.argv[2] || config.port || 9090;
      return this.server.listen(port, function() {
        return callback(port);
      });
    };

    return Minimum;

  })();

  if (require.main === module) {
    process.title = 'MinimumServer';
    server_instance = new Minimum();
    server_instance.init(function(error) {
      if (error) {
        return console.log(error);
      }
      return server_instance.start(function(port) {
        return console.log("listening on port " + port + ".");
      });
    });
  }

}).call(this);
