// Generated by CoffeeScript 1.6.3
/*
 Copyright (C) 2012 Rahul Devaskar <apostopher@gmail.com>

 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
 the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do
 so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
*/


(function() {
  var minGame, _;

  _ = require('lodash');

  minGame = (function() {
    var CARDS_PER_DECK, CARDS_PER_PLAYER, CARDS_PER_SUITE, FINISHED, JOKERS_PER_DECK, JOKER_CARD, MIN_ROUNDS, RUNNING, areEqualCards, dealCards, getCard, getCards, getDealPoints, getJokers, getPoints, removeFromDeal, sortDeal;

    CARDS_PER_DECK = 52;

    JOKERS_PER_DECK = 4;

    CARDS_PER_SUITE = 13;

    CARDS_PER_PLAYER = 5;

    JOKER_CARD = 0;

    MIN_ROUNDS = 3;

    RUNNING = 1;

    FINISHED = 2;

    getJokers = function(numOfJokers) {
      var jokers, num, _i;
      jokers = [];
      for (num = _i = 0; 0 <= numOfJokers ? _i < numOfJokers : _i > numOfJokers; num = 0 <= numOfJokers ? ++_i : --_i) {
        jokers.push(JOKER_CARD);
      }
      return jokers;
    };

    getCards = function(noOfPlayers) {
      var approxTotalCards, noOfDecks, noOfJokers, packOfCards, returnValue, totalCardsinHand, totalSaneCards, _i, _j, _results, _results1;
      totalCardsinHand = noOfPlayers * CARDS_PER_PLAYER;
      if (totalCardsinHand >= CARDS_PER_DECK / 2) {
        approxTotalCards = totalCardsinHand * 2;
        noOfDecks = Math.round(approxTotalCards / (CARDS_PER_DECK + JOKERS_PER_DECK));
        noOfJokers = noOfDecks * JOKERS_PER_DECK;
        totalSaneCards = noOfDecks * CARDS_PER_DECK;
        packOfCards = (function() {
          _results = [];
          for (var _i = 1; 1 <= totalSaneCards ? _i <= totalSaneCards : _i >= totalSaneCards; 1 <= totalSaneCards ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this).concat(getJokers(noOfJokers));
      } else {
        packOfCards = (function() {
          _results1 = [];
          for (var _j = 1; 1 <= CARDS_PER_DECK ? _j <= CARDS_PER_DECK : _j >= CARDS_PER_DECK; 1 <= CARDS_PER_DECK ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this).concat(getJokers(JOKERS_PER_DECK));
        noOfDecks = 1;
      }
      returnValue = {
        'packOfCards': _.shuffle(packOfCards),
        'noOfDecks': noOfDecks
      };
      return returnValue;
    };

    getCard = function(cards) {
      var randomCard;
      if (cards.length) {
        randomCard = cards.shift();
        if (randomCard === JOKER_CARD) {
          return JOKER_CARD;
        }
        randomCard = randomCard % CARDS_PER_DECK || CARDS_PER_DECK;
        return randomCard;
      } else {
        return void 0;
      }
    };

    dealCards = function(players, totalCards) {
      var card, deal, faceCard, player, playerDeal, playerName, randomCard, totalCardsLen, totalJokers, totalSaneCards, _i, _j, _len;
      deal = {};
      totalCardsLen = totalCards.length;
      totalJokers = totalCardsLen % CARDS_PER_DECK;
      totalSaneCards = totalCardsLen - totalJokers;
      for (_i = 0, _len = players.length; _i < _len; _i++) {
        player = players[_i];
        if (!_.isString(player)) {
          throw new TypeError('noStringPlayer');
        }
        for (card = _j = 0; 0 <= CARDS_PER_PLAYER ? _j < CARDS_PER_PLAYER : _j > CARDS_PER_PLAYER; card = 0 <= CARDS_PER_PLAYER ? ++_j : --_j) {
          if (!deal[player]) {
            deal[player] = [];
          }
          randomCard = getCard(totalCards);
          deal[player].push(randomCard);
        }
      }
      faceCard = getCard(totalCards, totalSaneCards);
      for (playerName in deal) {
        playerDeal = deal[playerName];
        sortDeal(playerDeal);
      }
      return {
        'restOfCards': totalCards,
        'deal': deal,
        'faceCards': [faceCard],
        'moves': 0,
        'minMoves': MIN_ROUNDS * players.length,
        'players': players,
        'nextMove': 0
      };
    };

    areEqualCards = function(cards) {
      var card, firstCard, _i, _len;
      firstCard = -1;
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        if (card !== JOKER_CARD) {
          if (firstCard === -1) {
            firstCard = card % CARDS_PER_SUITE;
          } else if (card % CARDS_PER_SUITE !== firstCard) {
            return false;
          }
        }
      }
      return true;
    };

    removeFromDeal = function(deal, cards) {
      var cardIndex, playerCard, removeCard, _i, _j, _len, _len1;
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        removeCard = cards[_i];
        for (cardIndex = _j = 0, _len1 = deal.length; _j < _len1; cardIndex = ++_j) {
          playerCard = deal[cardIndex];
          if (removeCard === playerCard) {
            deal.splice(cardIndex, 1);
            break;
          }
        }
      }
      return deal;
    };

    getPoints = function(cardId) {
      if (cardId !== JOKER_CARD) {
        return cardId % CARDS_PER_SUITE || CARDS_PER_SUITE;
      } else {
        return JOKER_CARD;
      }
    };

    getDealPoints = function(deal) {
      var card, totalPoints, _i, _len;
      totalPoints = 0;
      for (_i = 0, _len = deal.length; _i < _len; _i++) {
        card = deal[_i];
        totalPoints += getPoints(card);
      }
      return totalPoints;
    };

    sortDeal = function(deal) {
      var compareFn;
      compareFn = function(left, right) {
        var leftPts, rightPts;
        leftPts = getPoints(left);
        rightPts = getPoints(right);
        if (leftPts < rightPts) {
          return -1;
        } else if (leftPts > rightPts) {
          return 1;
        } else {
          return 0;
        }
      };
      return deal.sort(compareFn);
    };

    function minGame(players, me) {
      var noOfDecks, packOfCards, _ref;
      if (me) {
        this.gameState = me.gameState;
      } else {
        if (!_.isArray(players)) {
          throw new TypeError('playersError');
        }
        _ref = getCards(players.length), packOfCards = _ref.packOfCards, noOfDecks = _ref.noOfDecks;
        this.gameState = dealCards(players, packOfCards);
        this.gameState.noOfDecks = noOfDecks;
        this.gameState.currentState = RUNNING;
      }
    }

    minGame.prototype.getPlayerState = function(player) {
      var gamePlayer, gamePlayerDeal, gameState, playerState, _ref;
      gameState = this.gameState;
      playerState = {
        faceCards: gameState.faceCards,
        moves: gameState.moves,
        nextMove: gameState.players[gameState.nextMove],
        minMoves: gameState.minMoves
      };
      playerState.deals = {};
      _ref = gameState.deal;
      for (gamePlayer in _ref) {
        gamePlayerDeal = _ref[gamePlayer];
        playerState.deals[gamePlayer] = gamePlayerDeal.length;
        if (gamePlayer === player) {
          playerState['myDeal'] = gamePlayerDeal;
        }
      }
      return playerState;
    };

    minGame.prototype.makeMove = function(player, selectedCards, isFace) {
      var areSame, err, gameState, newCard, selectedCard, topCard, _i, _len;
      gameState = this.gameState;
      if (gameState.currentState === FINISHED) {
        throw new Error('gameOverError');
      }
      if (player !== gameState.players[gameState.nextMove]) {
        err = new Error('notAllowedToMakeMoveError');
        throw err;
      }
      if (selectedCards.length === 1) {
        areSame = true;
      } else {
        areSame = areEqualCards(selectedCards);
      }
      if (!areSame) {
        throw new Error('sameCardsRuleError');
      }
      if (isFace) {
        newCard = getCard(gameState.faceCards);
      } else {
        newCard = getCard(gameState.restOfCards);
      }
      for (_i = 0, _len = selectedCards.length; _i < _len; _i++) {
        selectedCard = selectedCards[_i];
        gameState.faceCards.unshift(parseInt(selectedCard, 10));
      }
      gameState.deal[player] = removeFromDeal(gameState.deal[player], selectedCards);
      gameState.deal[player].push(newCard);
      sortDeal(gameState.deal[player]);
      if (gameState.restOfCards.length === 0) {
        topCard = gameState.faceCards.shift();
        gameState.restOfCards = _.shuffle(gameState.faceCards);
        gameState.faceCards = [topCard];
      }
      gameState.moves += 1;
      gameState.nextMove += 1;
      if (gameState.nextMove === gameState.players.length) {
        gameState.nextMove = 0;
      }
      return this.getPlayerState(player);
    };

    minGame.prototype.declareMinimum = function(player) {
      var claimedMinimum, deal, deals, err, gameState, individualScore, maxScore, person, playerWon;
      gameState = this.gameState;
      if (gameState.currentState === FINISHED) {
        throw new Error('gameOverError');
      }
      if (player !== gameState.players[gameState.nextMove]) {
        err = new Error('notAllowedToMakeMoveError');
        throw err;
      }
      if (gameState.moves < gameState.minMoves) {
        throw new Error('minMovesRuleError');
      }
      deals = gameState.deal;
      playerWon = true;
      gameState.result = {};
      gameState.winners = [];
      maxScore = 0;
      claimedMinimum = getDealPoints(deals[player]);
      for (person in deals) {
        deal = deals[person];
        if (person !== player) {
          individualScore = getDealPoints(deal);
          if (individualScore > maxScore) {
            maxScore = individualScore;
          }
          if (individualScore <= claimedMinimum) {
            individualScore = 0;
            playerWon = false;
            gameState['winners'].push(person);
          }
          gameState.result[person] = individualScore;
        }
      }
      if (playerWon) {
        gameState.result[player] = 0;
        gameState['winners'].push(player);
      } else {
        gameState.result[player] = maxScore + claimedMinimum;
      }
      delete gameState['nextMove'];
      gameState['whoDeclared'] = player;
      gameState.currentState = FINISHED;
      return gameState;
    };

    return minGame;

  })();

  module.exports = minGame;

}).call(this);
