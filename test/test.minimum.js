// Generated by CoffeeScript 1.6.3
(function() {
  var minGame, should, _und;

  minGame = require('../minimum');

  should = require('chai').should();

  _und = require('lodash');

  describe('Minimum Game', function() {
    describe('when creating a new game with 6 players', function() {
      var myGame;
      myGame = null;
      before(function() {
        return myGame = new minGame(["Rahul", "Brajesh", "Vikash", "Ram", "Ankur", "Nikit"]);
      });
      it('should create initial game state', function() {
        return myGame.gameState.should.exist;
      });
      it('should have 6 players', function() {
        return _und.keys(myGame.gameState.deal).should.have.length(6);
      });
      it('and each player should have 5 cards', function() {
        return _und.each(_und.keys(myGame.gameState.deal), function(key) {
          return myGame.gameState.deal[key].should.have.length(5);
        });
      });
      it('should use only one deck', function() {
        return myGame.gameState.noOfDecks.should.equal(1);
      });
      it('and each player should have unique cards except for jokers', function() {
        return _und.each(_und.keys(myGame.gameState.deal), function(key) {
          var cardsWithoutJokers;
          cardsWithoutJokers = _und.compact(myGame.gameState.deal[key]);
          return cardsWithoutJokers.should.have.length((_und.uniq(cardsWithoutJokers)).length);
        });
      });
      it('should have only one face card', function() {
        return myGame.gameState.faceCards.should.have.length(1);
      });
      return it('should have appropriate number of closed cards', function() {
        var totalCardsinUse;
        totalCardsinUse = 6 * 5 + 1;
        return myGame.gameState.restOfCards.should.have.length(56 - totalCardsinUse);
      });
    });
    describe('when creating a new game with 9 players', function() {
      var myGame;
      myGame = null;
      before(function() {
        return myGame = new minGame(["Rahul", "Brajesh", "Vikash", "Ram", "Ankur", "Nikit", "Parth", "Shailesh", "Tushar"]);
      });
      return it('should use two decks', function() {
        return myGame.gameState.noOfDecks.should.equal(2);
      });
    });
    describe('when player makes a move by selecting face card', function() {
      var faceCards, myCards, myGame;
      myGame = null;
      myCards = null;
      faceCards = null;
      before(function() {
        myGame = new minGame(["Rahul", "Brajesh", "Vikash", "Ram", "Ankur", "Nikit"]);
        myCards = _und.union(myGame.gameState.deal["Rahul"], []);
        faceCards = _und.union(myGame.gameState.faceCards, []);
        return myGame.makeMove("Rahul", [myGame.gameState.deal["Rahul"][4]], true);
      });
      it('should have one card added to top of faceCards', function() {
        myGame.gameState.faceCards.should.have.length(faceCards.length);
        return myGame.gameState.faceCards[0].should.equal(myCards[4]);
      });
      return it('should have face card in his hand', function() {
        var found;
        found = _und.find(myGame.gameState.deal["Rahul"], function(card) {
          return card === faceCards[0];
        });
        return found.should.not.be.undefined;
      });
    });
    describe('when player makes a move by selecting close card', function() {
      var faceCards, myCards, myGame;
      myGame = null;
      myCards = null;
      faceCards = null;
      before(function() {
        myGame = new minGame(["Rahul", "Brajesh", "Vikash", "Ram", "Ankur", "Nikit"]);
        myCards = _und.union(myGame.gameState.deal["Rahul"], []);
        faceCards = _und.union(myGame.gameState.faceCards, []);
        return myGame.makeMove("Rahul", [myGame.gameState.deal["Rahul"][4]], false);
      });
      return it('should have one card added to top of faceCards', function() {
        myGame.gameState.faceCards.should.have.length(faceCards.length + 1);
        return myGame.gameState.faceCards[0].should.equal(myCards[4]);
      });
    });
    return describe('when all closed cards are utilized', function() {
      var myGame;
      myGame = null;
      before(function() {
        var pending, player, restOfCards, _results;
        myGame = new minGame(["Rahul", "Brajesh", "Vikash", "Ram", "Ankur", "Nikit"]);
        restOfCards = myGame.gameState.restOfCards.length;
        pending = true;
        _results = [];
        while (pending) {
          _results.push((function() {
            var _i, _len, _ref, _results1;
            _ref = _und.keys(myGame.gameState.deal);
            _results1 = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              player = _ref[_i];
              if (myGame.gameState.moves === restOfCards) {
                pending = false;
                break;
              }
              _results1.push(myGame.makeMove(player, [myGame.gameState.deal[player][4]], false));
            }
            return _results1;
          })());
        }
        return _results;
      });
      return it('should put topmost face card aside', function() {
        return myGame.gameState.faceCards.should.have.length(1);
      });
    });
  });

}).call(this);
