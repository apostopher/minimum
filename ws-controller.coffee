# Copyright (C) 2012 Rahul Devaskar <apostopher@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

_und     = require 'underscore'
_s       = require 'underscore.string'
minGame  = require './minimum'
minDb    = require './minimum.mongodb'

# Commands available to all players
commands =
	newGame        : 'newGame'
	makePlayerMove : 'makePlayerMove'
	hostNewGame    : 'hostNewGame'
	declareGame    : 'declareGame'

errors =
	newGame           : 'Error occured while starting game.'
	playersError      : 'invalid names of players.'
	noSuchGame        : 'No such game is in progress.'
	noSuchPlayer      : 'No such player exists.'
	invalidMove       : 'Invalid move.'
	MinMovesRuleError : 'Not allowed to declare before minimum moves.'
	saveFailedError   : 'Saving player\'s move failed!'
	noSuchGameError   : 'No such game exists.'
	declareError      : 'Error occured in declaring game.'

# Ids generated by this function are used to uniquely identify each game.
createId =  (seed) ->
  shasum = crypto.createHash 'sha1'
  shasum.update seed
  shasum.digest 'base64'

# This function is used to sanitize client-side data.
prepareName = (name) ->
	return _und(name).chain().trim().capitalize().value()

# This function is called when a player wants to host new game.
hostNewGame = (socket) ->
  # create newGameId
  seed = new Date
  gameId = createId (socket.handshake.address + '@' + seed.toISOString())

  # Notify the host about new game id
  socket.emit 'newGameId', gameId

	# Player will share this gameId with his/her friends
	# friends would then join the game by entering gameId
	# once all friends have joined, host will start the game
		
	true

# This function is called when all the players are ready to start a new game.
startNewGame = (socket, gameId, data) ->
	players = data.p
	if not players
		socket.emit ('error@' + gameId), error: errors.newGame
		return false

	# Prepare players
	if not _und.isArray players
		socket.emit ('error@' + gameId), error: errors.playersError
		return false
	else
		for player, index in players
			if not _und.isString player
				socket.emit ('error@' + gameId), error: errors.playersError
				return false
			else
				players[index] = prepareName player

	# Initiate a new Game.
	try
		newGame = new minGame players
	catch errObj
		console.log errObj.name + " : " + errObj.message
		return false

	# Save new game in Db
	minDb.save gameId, newGame, (error, insertedGame) ->
		if error
			for player in players
				socket.emit ('error@' + gameId), error: errors.saveFailedError
			return false
		else
			# Send responses to players
			for player in players
				playerState = insertedGame.getPlayerState player
				socket.emit (player + '@' + gameId), playerState
			return true

	return true

makePlayerMove = (socket, gameId, player, move) ->
	# sanitize player name
	player = prepareName player

	# Fetch the gameState from gameId
	minDb.findGameById gameId, (error, game) ->
		if error
			socket.emit ('error@' + gameId), error: errors.noSuchGameError
			return false

		# Do the validation
		if not game.gameState
			socket.emit ('error@' + gameId), error: errors.noSuchGame
		if not game.gameState.deal[player] # Player MUST exist.
			socket.emit ('error@' + gameId), error: errors.noSuchPlayer
		if not move.sc || move.if
			# Correct move attributes are not defined.
			socket.emit ('error@' + gameId), error: errors.invalidMove
	
		# All validations are OK! proceed!
		{playerState, newState} = game.makeMove player, move.c, move.f
	
		# Save the update to database
		minDb.save gameId, game, (error, updatedGame) ->
			if error
				# Update failed
				socket.broadcast.emit ('error@' + gameId), error: errors.saveFailedError
				socket.emit ('error@' + gameId), error: errors.saveFailedError
			else
				# Send player states to all players
				socket.broadcast.emit ('newState@' + gameId), newState
			
				# Send the player's state
				socket.emit (player + '@' + gameId), playerState
	true

declareMinimum = (socket, gameId, player) ->
	# sanitize player name
	player = prepareName player

	# player thinks that he has achieved minimum
	# Fetch the gameState from gameId
	minDb.findGameById gameId, (error, game) ->

		# Do the validation
		if not game.gameState
			socket.emit 'error', error: errors.noSuchGame
		if not game.gameState.deal[player] # Player MUST exist.
			socket.emit 'error', error: errors.noSuchPlayer
	
		# Aal izz well! proceed
		try
			gameResult = game.declareMinimum player
		catch errObj
			if errObj.message is errors.MinMovesRuleError
				socket.emit 'error', error: errors.MinMovesRuleError

		# update the database
		minDb.save gameId, game, (error, finishedGame) ->
			if error
				socket.emit 'error', error: errors.declareError
			else
				# Send the result to every player
				socket.broadcast.emit ('Result@' + gameId), gameResult
				socket.emit ('Result@' + gameId), gameResult
	true

webSocketHandler = (socket) ->
	socket.emit 'welcome', 'name': 'Minimum Game', 'commands': commands

	# Host new game event
	socket.on commands.hostNewGame, ->
		hostNewGame socket

	# Start New game event
	socket.on commands.newGame, (data) ->
		startNewGame socket, data

	# New move event
	socket.on commands.makePlayerMove, (gameId, player, move) ->
		makePlayerMove socket, gameId, player, move

	# Declare game event
	socket.on commands.declareGame, (gameId, player) ->
		declareMinimum socket, gameId, player

# Publish webSocket controller
module.exports = webSocketHandler